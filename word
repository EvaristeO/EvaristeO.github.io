<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OOP Concepts in JavaScript & C++</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; padding: 20px; }
        h1, h2 { color: #333; }
        code { background: #f4f4f4; padding: 5px; display: block; white-space: pre-wrap; }
    </style>
</head>
<body>
    <h1>Understanding OOP Concepts: Encapsulation, Inheritance, Polymorphism, and Abstraction</h1>
    
    <h2>Encapsulation</h2>
    <p>Encapsulation means restricting direct access to certain details of an object and only exposing what is necessary.</p>
    <code>
        class Person {
            constructor(name, age) {
                let _age = age; // Private variable
                this.name = name;
                
                this.getAge = function() {
                    return _age;
                }
            }
        }

        const john = new Person("John", 25);
        console.log(john.name); // Accessible
        console.log(john.getAge()); // Accessible
        console.log(john._age); // Undefined (Encapsulation)
    </code>
    
    <h2>Inheritance</h2>
    <p>Inheritance allows a class to acquire properties and behaviors from another class.</p>
    <code>
        class Animal {
            constructor(name) {
                this.name = name;
            }
            speak() {
                console.log(`${this.name} makes a sound.`);
            }
        }

        class Dog extends Animal {
            speak() {
                console.log(`${this.name} barks.`);
            }
        }

        const dog = new Dog("Rex");
        dog.speak(); // Rex barks.
    </code>
    
    <h2>Polymorphism</h2>
    <p>Polymorphism allows methods to be used in different ways depending on the object calling them.</p>
    <code>
        class Shape {
            draw() {
                console.log("Drawing a shape");
            }
        }

        class Circle extends Shape {
            draw() {
                console.log("Drawing a circle");
            }
        }

        let shapes = [new Shape(), new Circle()];
        shapes.forEach(shape => shape.draw());
    </code>
    
    <h2>Abstraction</h2>
    <p>Abstraction hides complex details and only exposes essential features.</p>
    <code>
        class Vehicle {
            constructor() {
                if (this.constructor === Vehicle) {
                    throw new Error("Abstract class cannot be instantiated");
                }
            }
            start() {
                throw new Error("Method 'start' must be implemented.");
            }
        }

        class Car extends Vehicle {
            start() {
                console.log("Car is starting...");
            }
        }

        const myCar = new Car();
        myCar.start();
    </code>

    <h2>C++ Examples</h2>
    <p>For OOP people, hereâ€™s how the same concepts apply in C++.</p>
    <h3>Encapsulation</h3>
    <code>
        class Person {
        private:
            int age;
        public:
            string name;
            Person(string n, int a) : name(n), age(a) {}
            int getAge() { return age; }
        };
    </code>
    
    <h3>Inheritance</h3>
    <code>
        class Animal {
        public:
            string name;
            Animal(string n) : name(n) {}
            virtual void speak() { cout << name << " makes a sound." << endl; }
        };

        class Dog : public Animal {
        public:
            Dog(string n) : Animal(n) {}
            void speak() override { cout << name << " barks." << endl; }
        };
    </code>

    <h3>Polymorphism</h3>
    <code>
        class Shape {
        public:
            virtual void draw() { cout << "Drawing a shape" << endl; }
        };
        class Circle : public Shape {
        public:
            void draw() override { cout << "Drawing a circle" << endl; }
        };
    </code>

    <h3>Abstraction</h3>
    <code>
        class Vehicle {
        public:
            virtual void start() = 0; // Pure virtual function
        };
        class Car : public Vehicle {
        public:
            void start() override { cout << "Car is starting..." << endl; }
        };
    </code>
</body>
</html>
